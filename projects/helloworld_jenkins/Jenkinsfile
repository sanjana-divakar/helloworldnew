pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'helloworld-app'
        DOCKER_TAG = 'latest'
        APP_PATH = 'projects/helloworld_jenkins'
    }

    stages {
        stage('Checkout') {
            steps {
                git(url: 'https://github.com/sanjana-divakar/helloworldnew.git', branch: 'main')
            }
        }

        stage('Static Code Analysis') {
            steps {
                script {
                    bat "cd %APP_PATH% && npm install eslint --save-dev"
                    // Run ESLint with --fix to automatically fix any issues
                    bat "cd %APP_PATH% && npx eslint *.js --fix || exit 0"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build from the actual app path where the Dockerfile is located
                    bat "docker build -t %DOCKER_IMAGE%:%DOCKER_TAG% %APP_PATH%"
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Stop and remove the container if it exists (corrected comment style)
                    bat 'REM Stop and remove the container if it exists'
                    bat 'docker ps -a -f name=helloworld-container -q | findstr . && docker stop helloworld-container || exit 0'
                    bat 'docker ps -a -f name=helloworld-container -q | findstr . && docker rm helloworld-container || exit 0'

                    def portInUse = bat(script: 'netstat -an | findstr ":8090 "', returnStdout: true).trim()
                    if (portInUse) {
                        echo 'Port 8090 is already in use, using fallback port 8091.'
                        bat "docker run -d -p 8091:80 --name helloworld-container %DOCKER_IMAGE%:%DOCKER_TAG%"
                    } else {
                        bat "docker run -d -p 8090:80 --name helloworld-container %DOCKER_IMAGE%:%DOCKER_TAG%"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    bat 'REM Stop and remove the container if it exists (corrected comment style)'
                    bat 'docker ps -a -f name=helloworld-container -q | findstr . && docker stop helloworld-container || exit 0'
                    bat 'docker ps -a -f name=helloworld-container -q | findstr . && docker rm helloworld-container || exit 0'

                    def portInUse = bat(script: 'netstat -an | findstr ":80 "', returnStdout: true).trim()
                    if (portInUse) {
                        echo 'Port 80 is already in use, using fallback port 8081.'
                        bat "docker run -d -p 8081:80 --name helloworld-container %DOCKER_IMAGE%:%DOCKER_TAG%"
                    } else {
                        bat "docker run -d -p 80:80 --name helloworld-container %DOCKER_IMAGE%:%DOCKER_TAG%"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
