pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'helloworld-app'
        DOCKER_TAG = 'latest'
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Get code from GitHub repository
                git(url: 'https://github.com/sanjana-divakar/helloworldnew.git', branch: 'main')
            }
        }
        
        stage('Static Code Analysis') {
            steps {
                // Run static code analysis using ESLint
                bat 'npm install eslint --save-dev'
                bat 'npx eslint *.js || exit 0'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    bat "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    // Stop and remove existing container if any
                    bat '''docker stop helloworld-container || exit 0
                          docker rm helloworld-container || exit 0
                    '''
                   
                    // Check if port 8090 is in use
                    def portInUse = bat(script: 'netstat -an | findstr 8090', returnStdout: true).trim()
                   
                    if (portInUse) {
                        echo 'Port 8090 is already in use, attempting to run on a different port.'
                        // Optionally, you can dynamically change the port or set a fallback port
                        def fallbackPort = 8091
                        bat "docker run -d -p ${fallbackPort}:80 --name helloworld-container ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    } else {
                        // Run on port 8090 if available
                        bat "docker run -d -p 8090:80 --name helloworld-container ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    // Stop existing container if running
                    bat 'docker ps -f name=helloworld-container -q | findstr . && docker container stop helloworld-container'
                    bat 'docker container ls -a -f name=helloworld-container -q | findstr . && docker container rm helloworld-container'
                    
                    // Check if port 80 is in use
                    def portInUse = bat(script: 'netstat -an | findstr 80', returnStdout: true).trim()
                   
                    if (portInUse) {
                        echo 'Port 80 is already in use, attempting to run on a different port.'
                        // Optionally, you can dynamically change the port or set a fallback port
                        def fallbackPort = 8081
                        bat "docker run -d -p ${fallbackPort}:80 --name helloworld-container ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    } else {
                        // Run on port 80 if available
                        bat "docker run -d -p 80:80 --name helloworld-container ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean up workspace
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
