pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'helloworld-app:latest'
        CONTAINER_NAME = 'helloworld-container'
        PORT = '8090'
    }

    stages {
        stage('Declarative: Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Static Code Analysis') {
            steps {
                script {
                    // Install ESLint if not already installed
                    bat 'cd projects/helloworld_jenkins && npm install eslint --save-dev'

                    // Run ESLint with --fix to automatically fix issues
                    bat 'cd projects/helloworld_jenkins && npx eslint *.js --fix || exit 0'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image using %DOCKER_IMAGE% instead of ${DOCKER_IMAGE}
                    bat 'docker build -t %DOCKER_IMAGE% projects/helloworld_jenkins'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Ensure any previous container is stopped and removed
                    bat 'docker ps -a -f name=%CONTAINER_NAME% -q | findstr . && docker stop %CONTAINER_NAME% || exit 0'
                    bat 'docker ps -a -f name=%CONTAINER_NAME% -q | findstr . && docker rm %CONTAINER_NAME% || exit 0'

                    // Run the container in the background
                    bat "docker run --name %CONTAINER_NAME% -d -p %PORT%:%PORT% %DOCKER_IMAGE%"

                    // Check if the container is running and test the app
                    bat "curl -f http://localhost:%PORT% || exit 0"

                    // Run tests inside the container if necessary (replace 'npm test' with your actual test command)
                    // bat "docker exec %CONTAINER_NAME% npm test || exit 0"
                }
            }
        }

        stage('Deploy') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    // Check if the container is running and accessible
                    bat "docker ps -a -f name=%CONTAINER_NAME% -q | findstr . && docker start %CONTAINER_NAME% || docker run -d --name %CONTAINER_NAME% -p %PORT%:%PORT% %DOCKER_IMAGE%"

                    // Verify the app is running on the specified port
                    bat "curl -f http://localhost:%PORT% || exit 0"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
