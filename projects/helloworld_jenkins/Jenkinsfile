pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'helloworld-app'
        DOCKER_TAG = 'latest'
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Get code from GitHub repository
                checkout scm
            }
        }
        
        stage('Static Code Analysis') {
            steps {
                // Run static code analysis using ESLint
                sh 'npm install eslint --save-dev'
                sh 'npx eslint *.js || true'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    // Run the container for testing
                    docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").withRun('-p 8080:80') { c ->
                        // Add your test commands here
                        sh 'curl http://localhost:8080 || true'
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    // Stop existing container if running
                    sh 'docker ps -f name=helloworld-container -q | xargs --no-run-if-empty docker container stop'
                    sh 'docker container ls -a -fname=helloworld-container -q | xargs -r docker container rm'
                    
                    // Run new container
                    docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").run('-p 80:80 --name helloworld-container -d')
                }
            }
        }
    }
    
    post {
        always {
            // Clean up workspace
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
